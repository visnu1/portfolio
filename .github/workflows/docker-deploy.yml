name: Portfolio CI/CD

on:
  push:
    branches:
      - main

jobs:
  projectbuild:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install project dependencies
      - name: Install dependencies
        run: npm ci

      # Build the project
      - name: Build project
        run: npm run build

      # Upload build artifacts (from the `out` directory)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_artifacts
          path: ./out # Ensure this is the correct build directory for your Next.js app

  dockerbuild:
    runs-on: ubuntu-latest
    needs: projectbuild # Ensure `projectbuild` completes first

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Download the build artifacts from the previous job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build_artifacts
          path: ./out

      # Build the Docker image (assumes the Dockerfile exists in the repo root)
      - name: Build Docker image
        run: docker build -t portfolio .

      # Save the Docker image as a tar file
      - name: Save Docker image
        run: docker save portfolio -o portfolio.tar

      # Upload the Docker image tar file for the next job
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: portfolio_image
          path: portfolio.tar

  deploy:
    runs-on: ubuntu-latest
    needs: dockerbuild # Ensure `dockerbuild` completes first

    steps:
      # Download the Docker image tar file
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: portfolio_image

      # Copy the Docker image to the EC2 instance
      - name: Copy Docker image to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          source: portfolio.tar
          target: /home/${{ secrets.SERVER_USER }}

      # SSH into the EC2 instance and deploy the container
      - name: Deploy to the server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            # Load the Docker image from the tar file
            docker load -i /home/${{ secrets.SERVER_USER }}/portfolio.tar

            rm -rf -i /home/${{ secrets.SERVER_USER }}/portfolio.tar

            # Stop and remove any existing container with the same name
            docker stop portfolio || true
            docker rm portfolio || true

            # Add code to remove image, or it may pile up
            
            # Run the Docker container
            docker run -d --name portfolio --restart always -p 8081:8081 portfolio:latest
